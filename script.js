/*
* The idea of this project was to display convenient and relevant weather info about a given city (25,000+ inhabitants for this website),
* along with practicing API calls. I'm using the Google Maps API to retrieve a description of the given city
*/

// SCRIPT tag is in the head of HTML, so DOM elements cannot be retrieved without waiting for them to load
async function fetchEndpointData(endpoint){
    const endpointResponse = await fetch(endpoint);
    const JSONData = await endpointResponse.json();
    return JSONData;
}
// A map (k,v) pairs that contains the name of a country, and its associated flag, for every country in the file (and a few more)
// This is a modified (simplified) version of the data from https://github.com/risan/country-flag-emoji/blob/master/src/data.js
const countryEmojis = new Map([ ["United Arab Emirates","ðŸ‡¦ðŸ‡ª"],["Afghanistan","ðŸ‡¦ðŸ‡«"],["Albania","ðŸ‡¦ðŸ‡±"],["Armenia","ðŸ‡¦ðŸ‡²"],["Angola","ðŸ‡¦ðŸ‡´"],["Argentina","ðŸ‡¦ðŸ‡·"],["Austria","ðŸ‡¦ðŸ‡¹"],["Australia","ðŸ‡¦ðŸ‡º"],["Aruba","ðŸ‡¦ðŸ‡¼"],["Azerbaijan","ðŸ‡¦ðŸ‡¿"],["Bosnia & Herzegovina","ðŸ‡§ðŸ‡¦"],["Barbados","ðŸ‡§ðŸ‡§"],["Bangladesh","ðŸ‡§ðŸ‡©"],["Belgium","ðŸ‡§ðŸ‡ª"],["Burkina Faso","ðŸ‡§ðŸ‡«"],["Bulgaria","ðŸ‡§ðŸ‡¬"],["Bahrain","ðŸ‡§ðŸ‡­"],["Burundi","ðŸ‡§ðŸ‡®"],["Benin","ðŸ‡§ðŸ‡¯"],["Bermuda","ðŸ‡§ðŸ‡²"],["Brunei","ðŸ‡§ðŸ‡³"],["Bolivia","ðŸ‡§ðŸ‡´"],["Brazil","ðŸ‡§ðŸ‡·"],["The Bahamas","ðŸ‡§ðŸ‡¸"],["Bhutan","ðŸ‡§ðŸ‡¹"],["Bouvet Island","ðŸ‡§ðŸ‡»"],["Botswana","ðŸ‡§ðŸ‡¼"],["Belarus","ðŸ‡§ðŸ‡¾"],["Belize","ðŸ‡§ðŸ‡¿"],["Canada","ðŸ‡¨ðŸ‡¦"],["Congo (Kinshasa)","ðŸ‡¨ðŸ‡©"],["Central African Republic","ðŸ‡¨ðŸ‡«"],["Congo - Brazzaville","ðŸ‡¨ðŸ‡¬"],["Switzerland","ðŸ‡¨ðŸ‡­"],["CÃ´te d'Ivoire","ðŸ‡¨ðŸ‡®"],["Cook Islands","ðŸ‡¨ðŸ‡°"],["Chile","ðŸ‡¨ðŸ‡±"],["Cameroon","ðŸ‡¨ðŸ‡²"],["China","ðŸ‡¨ðŸ‡³"],["Colombia","ðŸ‡¨ðŸ‡´"],["Clipperton Island","ðŸ‡¨ðŸ‡µ"],["Costa Rica","ðŸ‡¨ðŸ‡·"],["Cuba","ðŸ‡¨ðŸ‡º"],["Cape Verde","ðŸ‡¨ðŸ‡»"],["CuraÃ§ao","ðŸ‡¨ðŸ‡¼"],["Christmas Island","ðŸ‡¨ðŸ‡½"],["Cyprus","ðŸ‡¨ðŸ‡¾"],["Czechia","ðŸ‡¨ðŸ‡¿"],["Germany","ðŸ‡©ðŸ‡ª"],["Diego Garcia","ðŸ‡©ðŸ‡¬"],["Djibouti","ðŸ‡©ðŸ‡¯"],["Denmark","ðŸ‡©ðŸ‡°"],["Dominica","ðŸ‡©ðŸ‡²"],["Dominican Republic","ðŸ‡©ðŸ‡´"],["Algeria","ðŸ‡©ðŸ‡¿"],["Ceuta & Melilla","ðŸ‡ªðŸ‡¦"],["Ecuador","ðŸ‡ªðŸ‡¨"],["Estonia","ðŸ‡ªðŸ‡ª"],["Egypt","ðŸ‡ªðŸ‡¬"],["Western Sahara","ðŸ‡ªðŸ‡­"],["Eritrea","ðŸ‡ªðŸ‡·"],["Spain","ðŸ‡ªðŸ‡¸"],["Ethiopia","ðŸ‡ªðŸ‡¹"],["European Union","ðŸ‡ªðŸ‡º"],["Finland","ðŸ‡«ðŸ‡®"],["Fiji","ðŸ‡«ðŸ‡¯"],["Falkland Islands","ðŸ‡«ðŸ‡°"],["Micronesia","ðŸ‡«ðŸ‡²"],["Faroe Islands","ðŸ‡«ðŸ‡´"],["France","ðŸ‡«ðŸ‡·"],["Gabon","ðŸ‡¬ðŸ‡¦"],["United Kingdom","ðŸ‡¬ðŸ‡§"],["Grenada","ðŸ‡¬ðŸ‡©"],["Georgia","ðŸ‡¬ðŸ‡ª"],["French Guiana","ðŸ‡¬ðŸ‡«"],["Guernsey","ðŸ‡¬ðŸ‡¬"],["Ghana","ðŸ‡¬ðŸ‡­"],["Gibraltar","ðŸ‡¬ðŸ‡®"],["Greenland","ðŸ‡¬ðŸ‡±"],["Gambia","ðŸ‡¬ðŸ‡²"],["Guinea","ðŸ‡¬ðŸ‡³"],["Guadeloupe","ðŸ‡¬ðŸ‡µ"],["Equatorial Guinea","ðŸ‡¬ðŸ‡¶"],["Greece","ðŸ‡¬ðŸ‡·"],["Guatemala","ðŸ‡¬ðŸ‡¹"],["Guam","ðŸ‡¬ðŸ‡º"],["Guinea-Bissau","ðŸ‡¬ðŸ‡¼"],["Guyana","ðŸ‡¬ðŸ‡¾"],["Hong Kong SAR China","ðŸ‡­ðŸ‡°"],["Heard & McDonald Islands","ðŸ‡­ðŸ‡²"],["Honduras","ðŸ‡­ðŸ‡³"],["Croatia","ðŸ‡­ðŸ‡·"],["Haiti","ðŸ‡­ðŸ‡¹"],["Hungary","ðŸ‡­ðŸ‡º"],["Canary Islands","ðŸ‡®ðŸ‡¨"],["Indonesia","ðŸ‡®ðŸ‡©"],["Ireland","ðŸ‡®ðŸ‡ª"],["Israel","ðŸ‡®ðŸ‡±"],["Isle of Man","ðŸ‡®ðŸ‡²"],["India","ðŸ‡®ðŸ‡³"],["Iraq","ðŸ‡®ðŸ‡¶"],["Iran","ðŸ‡®ðŸ‡·"],["Iceland","ðŸ‡®ðŸ‡¸"],["Italy","ðŸ‡®ðŸ‡¹"],["Jersey","ðŸ‡¯ðŸ‡ª"],["Jamaica","ðŸ‡¯ðŸ‡²"],["Jordan","ðŸ‡¯ðŸ‡´"],["Japan","ðŸ‡¯ðŸ‡µ"],["Kenya","ðŸ‡°ðŸ‡ª"],["Kyrgyzstan","ðŸ‡°ðŸ‡¬"],["Samoa","ðŸ‡¼ðŸ‡¸"],["Kosovo","ðŸ‡½ðŸ‡°"],["Yemen","ðŸ‡¾ðŸ‡ª"],["Mayotte","ðŸ‡¾ðŸ‡¹"],
                    ["Cambodia","ðŸ‡°ðŸ‡­"],["Kiribati","ðŸ‡°ðŸ‡®"],["Comoros","ðŸ‡°ðŸ‡²"],["North Korea","ðŸ‡°ðŸ‡µ"],["South Korea","ðŸ‡°ðŸ‡·"],["Kuwait","ðŸ‡°ðŸ‡¼"],["Cayman Islands","ðŸ‡°ðŸ‡¾"],["Kazakhstan","ðŸ‡°ðŸ‡¿"],["Laos","ðŸ‡±ðŸ‡¦"],["Lebanon","ðŸ‡±ðŸ‡§"],["St. Lucia","ðŸ‡±ðŸ‡¨"],["Liechtenstein","ðŸ‡±ðŸ‡®"],["Sri Lanka","ðŸ‡±ðŸ‡°"],["Liberia","ðŸ‡±ðŸ‡·"],["Lesotho","ðŸ‡±ðŸ‡¸"],["Lithuania","ðŸ‡±ðŸ‡¹"],["Luxembourg","ðŸ‡±ðŸ‡º"],["Latvia","ðŸ‡±ðŸ‡»"],["Libya","ðŸ‡±ðŸ‡¾"],["Morocco","ðŸ‡²ðŸ‡¦"],["Monaco","ðŸ‡²ðŸ‡¨"],["Moldova","ðŸ‡²ðŸ‡©"],["Montenegro","ðŸ‡²ðŸ‡ª"],["Madagascar","ðŸ‡²ðŸ‡¬"],["Marshall Islands","ðŸ‡²ðŸ‡­"],["Macedonia","ðŸ‡²ðŸ‡°"],["Mali","ðŸ‡²ðŸ‡±"],["Myanmar","ðŸ‡²ðŸ‡²"],["Mongolia","ðŸ‡²ðŸ‡³"],["Macau SAR China","ðŸ‡²ðŸ‡´"],["Northern Mariana Islands","ðŸ‡²ðŸ‡µ"],["Martinique","ðŸ‡²ðŸ‡¶"],["Mauritania","ðŸ‡²ðŸ‡·"],["Montserrat","ðŸ‡²ðŸ‡¸"],["Malta","ðŸ‡²ðŸ‡¹"],["Mauritius","ðŸ‡²ðŸ‡º"],["Maldives","ðŸ‡²ðŸ‡»"],["Malawi","ðŸ‡²ðŸ‡¼"],["Mexico","ðŸ‡²ðŸ‡½"],["Malaysia","ðŸ‡²ðŸ‡¾"],["Mozambique","ðŸ‡²ðŸ‡¿"],["Namibia","ðŸ‡³ðŸ‡¦"],["New Caledonia","ðŸ‡³ðŸ‡¨"],["Niger","ðŸ‡³ðŸ‡ª"],["Norfolk Island","ðŸ‡³ðŸ‡«"],["Nigeria","ðŸ‡³ðŸ‡¬"],["Nicaragua","ðŸ‡³ðŸ‡®"],["Netherlands","ðŸ‡³ðŸ‡±"],["Norway","ðŸ‡³ðŸ‡´"],["Nepal","ðŸ‡³ðŸ‡µ"],["Nauru","ðŸ‡³ðŸ‡·"],["Niue","ðŸ‡³ðŸ‡º"],["New Zealand","ðŸ‡³ðŸ‡¿"],["Oman","ðŸ‡´ðŸ‡²"],["Panama","ðŸ‡µðŸ‡¦"],["Peru","ðŸ‡µðŸ‡ª"],["French Polynesia","ðŸ‡µðŸ‡«"],["Papua New Guinea","ðŸ‡µðŸ‡¬"],["Philippines","ðŸ‡µðŸ‡­"],["Pakistan","ðŸ‡µðŸ‡°"],["Poland","ðŸ‡µðŸ‡±"],["Puerto Rico","ðŸ‡µðŸ‡·"],["Portugal","ðŸ‡µðŸ‡¹"],["Paraguay","ðŸ‡µðŸ‡¾"],["Qatar","ðŸ‡¶ðŸ‡¦"],["Reunion","ðŸ‡·ðŸ‡ª"],["Romania","ðŸ‡·ðŸ‡´"],["Serbia","ðŸ‡·ðŸ‡¸"],["Russia","ðŸ‡·ðŸ‡º"],["Rwanda","ðŸ‡·ðŸ‡¼"],["Saudi Arabia","ðŸ‡¸ðŸ‡¦"],["Solomon Islands","ðŸ‡¸ðŸ‡§"],["Seychelles","ðŸ‡¸ðŸ‡¨"],["Sudan","ðŸ‡¸ðŸ‡©"],["Sweden","ðŸ‡¸ðŸ‡ª"],["Singapore","ðŸ‡¸ðŸ‡¬"],["Slovenia","ðŸ‡¸ðŸ‡®"],["Slovakia","ðŸ‡¸ðŸ‡°"],["Sierra Leone","ðŸ‡¸ðŸ‡±"],["San Marino","ðŸ‡¸ðŸ‡²"],["Senegal","ðŸ‡¸ðŸ‡³"],["Somalia","ðŸ‡¸ðŸ‡´"],["Suriname","ðŸ‡¸ðŸ‡·"],["South Sudan","ðŸ‡¸ðŸ‡¸"],["El Salvador","ðŸ‡¸ðŸ‡»"],["Syria","ðŸ‡¸ðŸ‡¾"],["Swaziland","ðŸ‡¸ðŸ‡¿"],["Tristan da Cunha","ðŸ‡¹ðŸ‡¦"],["Turks & Caicos Islands","ðŸ‡¹ðŸ‡¨"],["Chad","ðŸ‡¹ðŸ‡©"],["French Southern Territories","ðŸ‡¹ðŸ‡«"],["Togo","ðŸ‡¹ðŸ‡¬"],["Thailand","ðŸ‡¹ðŸ‡­"],["Tajikistan","ðŸ‡¹ðŸ‡¯"],["Timor-Leste","ðŸ‡¹ðŸ‡±"],["Turkmenistan","ðŸ‡¹ðŸ‡²"],["Tunisia","ðŸ‡¹ðŸ‡³"],["Tonga","ðŸ‡¹ðŸ‡´"],["Turkey","ðŸ‡¹ðŸ‡·"],["Trinidad & Tobago","ðŸ‡¹ðŸ‡¹"],["Taiwan","ðŸ‡¹ðŸ‡¼"],["Tanzania","ðŸ‡¹ðŸ‡¿"],["Ukraine","ðŸ‡ºðŸ‡¦"],["Uganda","ðŸ‡ºðŸ‡¬"],["United States","ðŸ‡ºðŸ‡¸"],["Uruguay","ðŸ‡ºðŸ‡¾"],["Uzbekistan","ðŸ‡ºðŸ‡¿"],["St. Vincent & Grenadines","ðŸ‡»ðŸ‡¨"],["Venezuela","ðŸ‡»ðŸ‡ª"],["Vietnam","ðŸ‡»ðŸ‡³"],["Vanuatu","ðŸ‡»ðŸ‡º"],["South Africa","ðŸ‡¿ðŸ‡¦"],["Zambia","ðŸ‡¿ðŸ‡²"],["Zimbabwe","ðŸ‡¿ðŸ‡¼"] ]);

document.addEventListener("DOMContentLoaded", async () => {
    // Select random background image 
    const NUM_BG_IMAGES = 5; // This is hardcoded for now, and will be changed later on -> bash script could retrieve the count from directory and hand it as a variable
    const imageIndex = Math.ceil(Math.random() * NUM_BG_IMAGES);
    document.querySelector("body").style.backgroundImage = `url('./images/background-images/bg${imageIndex}.jpg')`;
    // Query Selectors for some of the data elements 
    const cityNameCountryContainer = document.querySelector(".name-country");
    const cityPopulationContainer = document.querySelector(".population");
    // Retrieves the data to be presented for every city
    let cityData = JSON.parse(localStorage.getItem('cityData')) || "";
    if (cityData === ""){
        try{
            cityData = await fetchEndpointData("https://api.npoint.io/51175e4a65b8e108e5ad"); // Retrieves the city data from the given API endpoint
            const cityDataStringified = JSON.stringify(cityData);
            localStorage.setItem('cityData', cityDataStringified);
        } 
        catch(error){
            console.log(error);
        }
    }
    const NUM_CITIES = cityData.length;
    // This object contains location data in the form of city, country to locate a specific entry
    const cityCountryObj = cityData.map((entry) => {return {"location": `${entry.city}, ${entry.country}`}});
    // Button event listener
    const cityInputBtn = document.querySelector("#city-submit-btn");
    cityInputBtn.addEventListener("click", handleCityInput);
    // Retrieve city data -> retrieve weather data
    const cityInput = document.querySelector("#city-input");
    cityInput.addEventListener("input", autocompleteCityInput)
    // Define a function that loads a placeholder for the city text input
    function loadCityInputPlaceholder(){
        const citySeed = Math.floor(Math.random() * NUM_CITIES);
        cityInput.placeholder = `${cityData[citySeed].city}, ${cityData[citySeed].country}`; // Random placeholder for a city 
    }
    // Call the function 
    loadCityInputPlaceholder();
    // Handles the user city input 
    function handleCityInput(){
        const userCityInput  = document.querySelector("#city-input").value;
        // Retrieves the city Object that the user was looking for
        const inputCity = getSpecifiedCity(userCityInput);
        if (inputCity != ""){ // The input is not null, or undefined, etc.
            cityInfoDisplay(inputCity);
        }
        else{
            cityNotFoundError(userCityInput)
        }
    }
    function cityNotFoundError(cityName){
        const cityNotFound = document.querySelector(".city-not-found");
        cityNotFound.innerHTML = ""; // Resets any error that was there previously 
        cityNotFound.textContent = `The city '${cityName}' could not be found. Please check your spelling, and try again.`
        cityInput.textContent = "";
        loadCityInputPlaceholder(); // Load a new city placeholder
    }    
    async function cityInfoDisplay(inputCity){
        changeView("city-info"); // Switches the page view to display city information
        // Lat and long retrieved from the city obj
        const cityLatitude = inputCity.lat;
        const cityLongitude = inputCity.lng;
        // Displays a map of the given location, based on the lat and long values given
        const cityCountry = inputCity.city + "," + inputCity.country;
        initializeMap(cityLatitude, cityLongitude, inputCity.population, cityCountry);
        // Receive and return the weather data for the given city
        const weatherData = await retrieveCityWeatherData(cityLatitude, cityLongitude).then(res => res);
        makeRelevantWeatherDataMarkup(weatherData);
        // grab the time at the given location 
        const timeAtLocation = calculateTimeAtLocation(weatherData.timezone);
        document.querySelector(".current-time").textContent = `Date: ${timeAtLocation}`;
        // Displays the city basic information 
        displayMainCityInfo(inputCity.city, inputCity.country, inputCity.population, weatherData);
        // Wikipedia data about the city
        getCityWikiPage(inputCity.city);
        // Make the weather chart
        const wData = getWeatherChartData(weatherData.daily); // min, max, avg data  
        makeWeatherChart(wData.minTemp, wData.maxTemp, wData.dayTemp);
    }
    function getWeatherChartData(weatherData){
        const min = [];const max = [];const day = [];
        weatherData.forEach( (entry) => {
            min.push(convertKelvinToUnit('celcius',entry.temp.min));
            max.push(convertKelvinToUnit('celcius',entry.temp.max));
            day.push(convertKelvinToUnit('celcius',entry.temp.day));
        });

        return {"minTemp": min, "maxTemp": max, "dayTemp": day};
    }
    function displayMainCityInfo(name, country, population, weatherObj){
        const sunriseTime = new Date(weatherObj.current.sunrise * 1000);
        const sunsetTime = new Date(weatherObj.current.sunset * 1000);
        cityNameCountryContainer.textContent = name + ", " + country + " " + getCountryEmoji(country);
        cityPopulationContainer.textContent = "Population of " + formatPopulationValue(population);
        document.querySelector(".sunrise-time").textContent += String(sunriseTime).substring(4, 24);
        document.querySelector(".sunset-time").textContent += String(sunsetTime).substring(4,24);
    }
    /* Determines how zoomed in the city map should be based on the population. Very accurate for most NA cities, less so for EU cities (heavy density) */
    function getMapZoomLevelFromPopulation(population){
        if (population < 75000){ // small & very small cities
            return 13;
        }else if (population >= 75000 && population < 250000){ // small -medium cities
            return 12;
        }else if (population >= 250000 && population < 10000000){ // medium size cities
            return 11;
        }else if (population >= 1000000 && population < 3000000){ // large cities 
            return 10;
        }else{ // VERY large cities
            return 9;
        }
    }
    /* Converts a number in the style 12428 to 12,428. Could have also used NumberFormat() lol */
    function formatPopulationValue(population){
        let populationCharArray = [...String(population)];
        let populationFormattedString = "";
        const popLength = populationCharArray.length;
        const addCommaIndices = [];
        // City population values range from 5 to 8 digits
        switch(popLength){
            case 5: 
                addCommaIndices.push(2);
                break;
            case 6:
                addCommaIndices.push(3);
                break;
            case 7: 
                addCommaIndices.push(1,4);
                break;
            case 8:
                addCommaIndices.push(2,5);
                break;
            default:
                console.log("All cities in the dataset should fall within the given range...");
        }
        // After taking programming III, seeing nested loops makes me cringe a little bit. RIP time complexity, but cmon, we also don't need a hashtable for everything...
        for (let i = 0; i <popLength; i++){
            for (let commaIndice of addCommaIndices){
                if (i === commaIndice){
                    populationFormattedString += ",";
                }
            }
            populationFormattedString += populationCharArray[i];
        }
        return populationFormattedString; 
    }
    /* Retrieves and returns the weather data associated with the given coordinates */
    function retrieveCityWeatherData(cLat, cLong){
        let weatherData = "";
        try{
            weatherData = fetchEndpointData(`https://api.openweathermap.org/data/3.0/onecall?lat=${cLat}&lon=${cLong}&exclude=alerts,minutely,hourly&appid=3c7bc9f835d589478c313a48f04509d2`).then(weatherData => weatherData);
        }
        catch(e){
            console.log("An error occured while fetching your weather data!" + e);
        }
        return weatherData;
    }
    /* Generates the markup for the weather data we want to display */
    function makeRelevantWeatherDataMarkup(weatherObj){ 
        console.log(weatherObj);
        document.querySelectorAll(".weather-info div").forEach( (info) => info.textContent = ""); // Clears the text content of each node.
        document.querySelector(".humidity").textContent = "Humidity: " +weatherObj.current.humidity + "%";
        document.querySelector(".weather-description").textContent = "Forecast: " + weatherObj.current.weather[0].description;
        document.querySelector(".wind-speed").textContent = "Wind Speed: " + weatherObj.current.wind_speed + "km/h";
        document.querySelector(".current-temperature").textContent += `Currently ${convertKelvinToUnit('celcius', weatherObj.current.temp)}Â°C / ${convertKelvinToUnit('fahrenheit', weatherObj.current.temp)}Â°F |
                                                                        Feels like ${convertKelvinToUnit('celcius', weatherObj.current.feels_like)}Â°C / ${convertKelvinToUnit('fahrenheit', weatherObj.current.feels_like)}Â°F`;
    }
    function calculateTimeAtLocation(locationTimezone){
        const formatOptions = {
            timezone: locationTimezone,
            weekday: "long",
            year: "numeric",
            month: "long",
            day: "numeric",
            hour12: true
        };
        const dateAndTimeAtArea = new Date().toLocaleString("en-us", {formatOptions});
        return dateAndTimeAtArea; // Returns the current time at the location
    } 
    function initializeMap(latitude, longitude, population, cityCountry){
        const mapContainer = document.querySelector("#map");
        const locationCenter = google.maps.LatLngLiteral = {lat: latitude, lng: longitude};
        const mapOptions =  {
                center: locationCenter,
                zoom: getMapZoomLevelFromPopulation(population),
                // These options make the map relatively static, as to only display the city that we're looking at.
                draggable: false, 
                zoomControl: false,
                scrollwheel: false,
                mapTypeId: "hybrid",
        };
        // Create the map
        const map = new google.maps.Map(mapContainer, mapOptions);
        // Use the map and places service to get a placeId
        const placeService = new google.maps.places.PlacesService(map);
        // Query parameters
        const queryParams = {
            query: cityCountry, 
            fields: ['photos'],
        };
        // Perform a search on the location and log out the results
        placeService.findPlaceFromQuery(queryParams, function(results, status){
            if (status === google.maps.places.PlacesServiceStatus.OK){
                for (result of results){
                    if (result.photos !== ""){
                        const photoDiv = document.querySelector("#google-maps-city-photo");
                        photoDiv.innerHTML = ""; // resets any previous images in there
                        const cityImg = document.createElement("img");
                        cityImg.setAttribute("src", result.photos[0].getUrl());
                        cityImg.setAttribute("alt", 'City Image');
                        cityImg.setAttribute("id", "cityImg")
                        photoDiv.appendChild(cityImg);
                    }
                }
            }
        });
    }
    function getSpecifiedCity(userCityInput){
        let userCity = "";
        const inputArray = userCityInput.split(",");
        const cityName = inputArray[0];
        const countryName = inputArray[1].trim();
        for (let city of cityData){
            if (city.city.includes(cityName) && city.country.includes(countryName)){
                userCity = city;
                break;
            }
        }
        return userCity;
    }
    function makeWindVectorArrow(magnitude, direction){

    }
    function changeView(newView){
        const cityInputView = document.querySelector(".city-input-view");
        const cityInfoView = document.querySelector(".city-info-view");
        if (newView === 'search'){
            cityInputView.style.display = 'block';
            cityInfoView.classList.toggle("city-info-view");            
        }
        else if (newView === 'city-info'){
            cityInputView.style.display = 'none';
            cityInfoView.classList.toggle("city-info-view-visible")
        }
        else{
            console.log("The view paramater passed is not supported yet");
        }
    }

    /* Autocompletes the title options after the user types in a certain amount of characters*/
    function autocompleteCityInput(){
        const datalistReference = this.list; // References the datalist element associated with the input
        if (this.value.length >= 2){ // Starts using autocomplete after 1 character has been typed 
            const locationMatches = findMatches(this.value, cityCountryObj);
            datalistReference.replaceChildren();
            for (let match of locationMatches){
                let locationOption = document.createElement('option');
                locationOption.textContent = match;
                datalistReference.appendChild(locationOption);
            }
        }
    }
    /* Simple function that checks to see if the current user input string matches any of the song titles in the JSON file */
    function findMatches(currentInput, cityCountryObj){
        const matchArray = []
        const matches = cityCountryObj.filter((entry) => entry.location.toLowerCase().includes(currentInput.toLowerCase()));
        matches.forEach((match) => {matchArray.push(match.location)})
        return matchArray; // Returns the results from the search
    }   
    /* Converts kelvin temperature data into the desired unit */
    function convertKelvinToUnit(unit, kelvins){
        let convertedUnit = 0;
        switch(unit){
            case "celcius": 
                convertedUnit = Math.round(kelvins - 273.15,1);
                break;
            case "fahrenheit":
                convertedUnit = Math.round(1.80 * (kelvins - 273.15) + 32.0,1);
                break;
            default:
                console.log("invalid unit parameter passed");        
        }
        return convertedUnit;
    }
    // Finds and retrieves the emoji (flag) of the given country
    function getCountryEmoji(countryName){
        return (countryEmojis.get(countryName));
    }
    // Fetching from the wikiepedia API to receive data about the city
    function getCityWikiPage(cityCountryPair){
        const url = `https://en.wikipedia.org/w/api.php?action=parse&page=${cityCountryPair}&format=json`; // Specifying the url to fetch from
        const wikiPage = fetchEndpointData(url).then(res => res);
        console.log(wikiPage);
    }
    // ==================================== WEATHER CHART ============================
    function makeWeatherChart(minData, maxData, dayData){
        console.log(minData, maxData, dayData);
        const context = document.querySelector("#weather-chart").getContext('2d');
        const labels = getWeekdaysFormattted(); // Returns an array of days in the format: M D
        const options = {

        }
        const data = {
            labels: labels,
            datasets: [{
                label: 'Day Temperature',
                data: dayData,
                fill: false,
                tension: 0.1
            },
            {
                label: 'Max Temperature',
                data: maxData,
                fill: false,
                tension: 0.1
            },
            {
                label: 'Min Temperature',
                data: minData,
                fill: false,
                tension: 0.1
            }
            ]
        };
        const chartConfig = {type: 'line', data:data};
        new Chart(context, chartConfig); // create and display the chart
    }
    function getWeekdaysFormattted(){
        const week = [];
        const DAYS_IN_WEEK = 7;
        for (let i = 0; i < DAYS_IN_WEEK; i++){
            const dateObject = new Date();
            const date = dateObject.getDay()
            const monthFormatted = new Intl.DateTimeFormat("en-us", {month: "long"}).format(dateObject);
            week.push(monthFormatted + date);
        }
        return week;
    }
});